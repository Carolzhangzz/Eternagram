{"ast":null,"code":"var _jsxFileName = \"/Users/macair/Documents/GitHub/chat-climate-game/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState } from 'react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [typing, setTyping] = useState(false);\n\n  //Added the API constants\n  const [userId, setUserId] = useState('');\n  const [message, setMessage] = useState('');\n  const [response, setResponse] = useState('');\n\n  //Code for handling submit to API\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user_id: userId,\n        message: message\n      })\n    };\n    const apiResponse = await fetch('https://ryno-v2-cedo4cgxka-de.a.run.app/chat', requestOptions);\n    const data = await apiResponse.json();\n    setResponse(data.response);\n  };\n  const handleSend = async message => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n\n    // new array of messages\n    const newMessages = [...messages, newMessage]; // all the old messages, + the new messages \n\n    //update our messages state\n    setMessages(newMessages);\n\n    //set a typing indicator (chatgpt is typing...)\n    setTyping(true);\n    //process message to chatGPT (send it over and see reponse)\n\n    await processMessageToChatGPT(newMessages);\n  };\n  async function processMessageToChatGPT(chatMessages) {\n    //chatMessages { sender: \"user\" or \"ChatGPT\", message: \"The message content here\"}\n    //apiMessages {role: \"user\" or \"assistant\", content: \"The message content here\"}\n\n    let apiMessages = chatMessages.map(messageObject => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n\n    //role: \"user\" -> a message from the user, \"assistant -> a response from chatGPT\"\n    // \"system\" -> generally one initial message defining HOW we want chatgpt to talk\n\n    const systemMessage = {\n      role: \"system\",\n      content: \"Explain all concepts like I am a narrator for a digital game.\"\n    };\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [systemMessage, ...apiMessages // [message1, message2, message3]\n      ]\n    };\n\n    const apiKey = \"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\";\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then(data => {\n      return data.json();\n    }).then(data => {\n      console.log(data.choices[0].message.content);\n      setMessages([...chatMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n      setTyping(false);\n    });\n  }\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I am ChatGPT! Please ask me anything.  \",\n    sender: \"ChatGPT\",\n    direction: \"ingoing\"\n  }, {\n    message: \"This is a testing messageðŸ‘Œ. <img  src={logo} alt='Logo' />\",\n    sender: \"ChatGPT\",\n    direction: \"ingoing\"\n  }]);\n  const msg_style = {\n    fontFamily: \"monospace\",\n    background: \"rgb(110, 72, 170)\",\n    color: \"rgb(255, 255, 255)\"\n  };\n  const Msg = model => {\n    console.log(model);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: msg_style,\n      children: [\"Hello + \", model]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"600px\",\n        width: \"500px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MainContainer, {\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            typingIndicator: typing ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"ChatGPT is typing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 52\n            }, this) : null,\n            children: messages.map((message, i) => {\n              // return <Message style={msg_style} key={i} model={message}  /> \n              return /*#__PURE__*/_jsxDEV(Msg, {\n                model: message\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Type message here\",\n            onSend: handleSend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"User ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: userId,\n            onChange: e => setUserId(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Message:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: message,\n            onChange: e => setMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Response: \", response]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"AM21mf2N4IOfqj7MaUf+mal1aFQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","App","_s","typing","setTyping","userId","setUserId","message","setMessage","response","setResponse","handleSubmit","e","preventDefault","requestOptions","method","headers","body","JSON","stringify","user_id","apiResponse","fetch","data","json","handleSend","newMessage","sender","direction","newMessages","messages","setMessages","processMessageToChatGPT","chatMessages","apiMessages","map","messageObject","role","content","systemMessage","apiRequestBody","apiKey","then","console","log","choices","msg_style","fontFamily","background","color","Msg","model","style","children","fileName","_jsxFileName","lineNumber","columnNumber","position","height","width","typingIndicator","i","placeholder","onSend","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/macair/Documents/GitHub/chat-climate-game/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\n\n\n\nconst App = () => {\n\n\n\n  const [typing, setTyping] = useState(false);\n  \n  //Added the API constants\n  const [userId, setUserId] = useState('');\n  const [message, setMessage] = useState('');\n  const [response, setResponse] = useState('');\n\n\n\n  //Code for handling submit to API\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ user_id: userId, message: message }),\n    };\n\n    const apiResponse = await fetch('https://ryno-v2-cedo4cgxka-de.a.run.app/chat', requestOptions);\n    const data = await apiResponse.json();\n    setResponse(data.response);\n  };\n\n\n\n\n\n  const handleSend = async (message) => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\",\n    }\n\n    // new array of messages\n    const newMessages = [...messages, newMessage]; // all the old messages, + the new messages \n\n    //update our messages state\n    setMessages(newMessages);\n\n    //set a typing indicator (chatgpt is typing...)\n    setTyping(true);\n    //process message to chatGPT (send it over and see reponse)\n\n    await processMessageToChatGPT(newMessages);\n\n  }\n\n  async function processMessageToChatGPT(chatMessages) {\n    //chatMessages { sender: \"user\" or \"ChatGPT\", message: \"The message content here\"}\n    //apiMessages {role: \"user\" or \"assistant\", content: \"The message content here\"}\n\n    let apiMessages = chatMessages.map((messageObject) => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\"\n      } else {\n        role = \"user\"\n      }\n      return { role: role, content: messageObject.message }\n    });\n\n    //role: \"user\" -> a message from the user, \"assistant -> a response from chatGPT\"\n    // \"system\" -> generally one initial message defining HOW we want chatgpt to talk\n\n    const systemMessage = {\n      role: \"system\",\n      content: \"Explain all concepts like I am a narrator for a digital game.\"\n    }\n\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [\n        systemMessage,\n        ...apiMessages // [message1, message2, message3]\n      ]\n    }\n\n    const apiKey = \"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\";\n\n\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then((data) => {\n      return data.json();\n    }).then((data) => {\n      console.log(data.choices[0].message.content);\n      setMessages(\n        [...chatMessages, {\n          message: data.choices[0].message.content,\n          sender: \"ChatGPT\"\n        }]\n      );\n      setTyping(false);\n    })\n  }\n\n  const [messages, setMessages] = useState([\n    {\n      message: \"Hello, I am ChatGPT! Please ask me anything.  \",\n      sender: \"ChatGPT\",\n      direction: \"ingoing\",\n    },\n    {\n      message: \"This is a testing messageðŸ‘Œ. <img  src={logo} alt='Logo' />\",\n      sender: \"ChatGPT\",\n      direction: \"ingoing\",\n    },\n  ]);\n\n\n  const msg_style = {\n    fontFamily: \"monospace\",\n    background: \"rgb(110, 72, 170)\",\n    color: \"rgb(255, 255, 255)\"\n  }\n\n  const Msg = (model) => {\n\n    console.log(model)\n\n    return (\n      <div style = {msg_style}>\n        Hello + {model}\n      </div>\n    )\n  }\n\n\n  return (\n    <div>\n\n      <div style={{ position: \"relative\", height: \"600px\", width: \"500px\" }}>\n        <MainContainer>\n          <ChatContainer>\n            <MessageList typingIndicator={typing ? <TypingIndicator content=\"ChatGPT is typing\" /> : null}>\n              {messages.map((message, i) => {\n                // return <Message style={msg_style} key={i} model={message}  /> \n                return <Msg key={i} model={message} />\n\n              })}\n            </MessageList>\n            <MessageInput placeholder='Type message here' onSend={handleSend} />\n          </ChatContainer>\n        </MainContainer>\n      </div>\n\n\n      <div>\n        <form onSubmit={handleSubmit}>\n          <label>\n            User ID:\n            <input type=\"text\" value={userId} onChange={(e) => setUserId(e.target.value)} />\n          </label>\n          <br />\n          <label>\n            Message:\n            <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} />\n          </label>\n          <br />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <p>Response: {response}</p>\n      </div>\n\n\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,2DAA2D;AAClE,SAASC,aAAa,EAAEC,aAAa,EAAEC,WAAW,EAAEC,OAAO,EAAEC,YAAY,EAAEC,eAAe,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIjI,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAIhB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;;EAE3C;EACA,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;;EAI5C;EACA,MAAMmB,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,EAAE;IAElB,MAAMC,cAAc,GAAG;MACrBC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,OAAO,EAAEf,MAAM;QAAEE,OAAO,EAAEA;MAAQ,CAAC;IAC5D,CAAC;IAED,MAAMc,WAAW,GAAG,MAAMC,KAAK,CAAC,8CAA8C,EAAER,cAAc,CAAC;IAC/F,MAAMS,IAAI,GAAG,MAAMF,WAAW,CAACG,IAAI,EAAE;IACrCd,WAAW,CAACa,IAAI,CAACd,QAAQ,CAAC;EAC5B,CAAC;EAMD,MAAMgB,UAAU,GAAG,MAAOlB,OAAO,IAAK;IACpC,MAAMmB,UAAU,GAAG;MACjBnB,OAAO,EAAEA,OAAO;MAChBoB,MAAM,EAAE,MAAM;MACdC,SAAS,EAAE;IACb,CAAC;;IAED;IACA,MAAMC,WAAW,GAAG,CAAC,GAAGC,QAAQ,EAAEJ,UAAU,CAAC,CAAC,CAAC;;IAE/C;IACAK,WAAW,CAACF,WAAW,CAAC;;IAExB;IACAzB,SAAS,CAAC,IAAI,CAAC;IACf;;IAEA,MAAM4B,uBAAuB,CAACH,WAAW,CAAC;EAE5C,CAAC;EAED,eAAeG,uBAAuBA,CAACC,YAAY,EAAE;IACnD;IACA;;IAEA,IAAIC,WAAW,GAAGD,YAAY,CAACE,GAAG,CAAEC,aAAa,IAAK;MACpD,IAAIC,IAAI,GAAG,EAAE;MACb,IAAID,aAAa,CAACT,MAAM,KAAK,SAAS,EAAE;QACtCU,IAAI,GAAG,WAAW;MACpB,CAAC,MAAM;QACLA,IAAI,GAAG,MAAM;MACf;MACA,OAAO;QAAEA,IAAI,EAAEA,IAAI;QAAEC,OAAO,EAAEF,aAAa,CAAC7B;MAAQ,CAAC;IACvD,CAAC,CAAC;;IAEF;IACA;;IAEA,MAAMgC,aAAa,GAAG;MACpBF,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAE;IACX,CAAC;IAED,MAAME,cAAc,GAAG;MACrB,OAAO,EAAE,eAAe;MACxB,UAAU,EAAE,CACVD,aAAa,EACb,GAAGL,WAAW,CAAC;MAAA;IAEnB,CAAC;;IAED,MAAMO,MAAM,GAAG,qDAAqD;IAGpE,MAAMnB,KAAK,CAAC,4CAA4C,EAAE;MACxDP,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,eAAe,EAAG,UAASyB,MAAO,EAAC;QACnC,cAAc,EAAE;MAClB,CAAC;MACDxB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACqB,cAAc;IACrC,CAAC,CAAC,CAACE,IAAI,CAAEnB,IAAI,IAAK;MAChB,OAAOA,IAAI,CAACC,IAAI,EAAE;IACpB,CAAC,CAAC,CAACkB,IAAI,CAAEnB,IAAI,IAAK;MAChBoB,OAAO,CAACC,GAAG,CAACrB,IAAI,CAACsB,OAAO,CAAC,CAAC,CAAC,CAACtC,OAAO,CAAC+B,OAAO,CAAC;MAC5CP,WAAW,CACT,CAAC,GAAGE,YAAY,EAAE;QAChB1B,OAAO,EAAEgB,IAAI,CAACsB,OAAO,CAAC,CAAC,CAAC,CAACtC,OAAO,CAAC+B,OAAO;QACxCX,MAAM,EAAE;MACV,CAAC,CAAC,CACH;MACDvB,SAAS,CAAC,KAAK,CAAC;IAClB,CAAC,CAAC;EACJ;EAEA,MAAM,CAAC0B,QAAQ,EAAEC,WAAW,CAAC,GAAGvC,QAAQ,CAAC,CACvC;IACEe,OAAO,EAAE,gDAAgD;IACzDoB,MAAM,EAAE,SAAS;IACjBC,SAAS,EAAE;EACb,CAAC,EACD;IACErB,OAAO,EAAE,6DAA6D;IACtEoB,MAAM,EAAE,SAAS;IACjBC,SAAS,EAAE;EACb,CAAC,CACF,CAAC;EAGF,MAAMkB,SAAS,GAAG;IAChBC,UAAU,EAAE,WAAW;IACvBC,UAAU,EAAE,mBAAmB;IAC/BC,KAAK,EAAE;EACT,CAAC;EAED,MAAMC,GAAG,GAAIC,KAAK,IAAK;IAErBR,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;IAElB,oBACEnD,OAAA;MAAKoD,KAAK,EAAIN,SAAU;MAAAO,QAAA,GAAC,UACf,EAACF,KAAK;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACV;EAEV,CAAC;EAGD,oBACEzD,OAAA;IAAAqD,QAAA,gBAEErD,OAAA;MAAKoD,KAAK,EAAE;QAAEM,QAAQ,EAAE,UAAU;QAAEC,MAAM,EAAE,OAAO;QAAEC,KAAK,EAAE;MAAQ,CAAE;MAAAP,QAAA,eACpErD,OAAA,CAACP,aAAa;QAAA4D,QAAA,eACZrD,OAAA,CAACN,aAAa;UAAA2D,QAAA,gBACZrD,OAAA,CAACL,WAAW;YAACkE,eAAe,EAAE1D,MAAM,gBAAGH,OAAA,CAACF,eAAe;cAACwC,OAAO,EAAC;YAAmB;cAAAgB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,QAAG,GAAG,IAAK;YAAAJ,QAAA,EAC3FvB,QAAQ,CAACK,GAAG,CAAC,CAAC5B,OAAO,EAAEuD,CAAC,KAAK;cAC5B;cACA,oBAAO9D,OAAA,CAACkD,GAAG;gBAASC,KAAK,EAAE5C;cAAQ,GAAlBuD,CAAC;gBAAAR,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,QAAoB;YAExC,CAAC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QACU,eACdzD,OAAA,CAACH,YAAY;YAACkE,WAAW,EAAC,mBAAmB;YAACC,MAAM,EAAEvC;UAAW;YAAA6B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAG;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MACtD;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACZ,eAGNzD,OAAA;MAAAqD,QAAA,gBACErD,OAAA;QAAMiE,QAAQ,EAAEtD,YAAa;QAAA0C,QAAA,gBAC3BrD,OAAA;UAAAqD,QAAA,GAAO,UAEL,eAAArD,OAAA;YAAOkE,IAAI,EAAC,MAAM;YAACC,KAAK,EAAE9D,MAAO;YAAC+D,QAAQ,EAAGxD,CAAC,IAAKN,SAAS,CAACM,CAAC,CAACyD,MAAM,CAACF,KAAK;UAAE;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAG;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAC1E,eACRzD,OAAA;UAAAsD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM,eACNzD,OAAA;UAAAqD,QAAA,GAAO,UAEL,eAAArD,OAAA;YAAOkE,IAAI,EAAC,MAAM;YAACC,KAAK,EAAE5D,OAAQ;YAAC6D,QAAQ,EAAGxD,CAAC,IAAKJ,UAAU,CAACI,CAAC,CAACyD,MAAM,CAACF,KAAK;UAAE;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAG;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAC5E,eACRzD,OAAA;UAAAsD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM,eACNzD,OAAA;UAAOkE,IAAI,EAAC,QAAQ;UAACC,KAAK,EAAC;QAAQ;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACjC,eACPzD,OAAA;QAAAqD,QAAA,GAAG,YAAU,EAAC5C,QAAQ;MAAA;QAAA6C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACvB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAGF;AAEV,CAAC;AAACvD,EAAA,CAlLID,GAAG;AAAAqE,EAAA,GAAHrE,GAAG;AAoLT,eAAeA,GAAG;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}