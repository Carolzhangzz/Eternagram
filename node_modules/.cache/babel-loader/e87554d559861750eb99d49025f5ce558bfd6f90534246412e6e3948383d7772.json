{"ast":null,"code":"var _jsxFileName = \"/Users/macair/Documents/GitHub/chat-climate-game/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState } from 'react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I am ChatGPT! Please ask me anything.\",\n    sender: \"ChatGPT\",\n    direction: \"ingoing\"\n  }]);\n\n  //Added the API constants\n  const [userId, setUserId] = useState('');\n  const [message, setMessage] = useState('');\n  const [response, setResponse] = useState('');\n  const handleSend = async message => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n\n    // new array of messages\n    const newMessages = [...messages, newMessage]; // all the old messages, + the new messages \n\n    //update our messages state\n    setMessages(newMessages);\n\n    //set a typing indicator (chatgpt is typing...)\n    setTyping(true);\n    //process message to chatGPT (send it over and see reponse)\n\n    await processMessageToChatGPT(newMessages);\n  };\n  async function processMessageToChatGPT(chatMessages) {\n    //chatMessages { sender: \"user\" or \"ChatGPT\", message: \"The message content here\"}\n    //apiMessages {role: \"user\" or \"assistant\", content: \"The message content here\"}\n\n    let apiMessages = chatMessages.map(messageObject => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n\n    //role: \"user\" -> a message from the user, \"assistant -> a response from chatGPT\"\n    // \"system\" -> generally one initial message defining HOW we want chatgpt to talk\n\n    const systemMessage = {\n      role: \"system\",\n      content: \"Explain all concepts like I am a narrator for a digital game.\"\n    };\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [systemMessage, ...apiMessages // [message1, message2, message3]\n      ]\n    };\n\n    const apiKey = \"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\";\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then(data => {\n      return data.json();\n    }).then(data => {\n      console.log(data.choices[0].message.content);\n      setMessages([...chatMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n      setTyping(false);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"600px\",\n        width: \"500px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MainContainer, {\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            typingIndicator: typing ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"ChatGPT is typing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 52\n            }, this) : null,\n            children: messages.map((message, i) => {\n              return /*#__PURE__*/_jsxDEV(Message, {\n                model: message\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Type message here\",\n            onSend: handleSend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"4tAcCR+2GiSGXozj/Qadl6/C4jg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","App","_s","typing","setTyping","messages","setMessages","message","sender","direction","userId","setUserId","setMessage","response","setResponse","handleSend","newMessage","newMessages","processMessageToChatGPT","chatMessages","apiMessages","map","messageObject","role","content","systemMessage","apiRequestBody","apiKey","fetch","method","headers","body","JSON","stringify","then","data","json","console","log","choices","children","style","position","height","width","typingIndicator","fileName","_jsxFileName","lineNumber","columnNumber","i","model","placeholder","onSend","_c","$RefreshReg$"],"sources":["/Users/macair/Documents/GitHub/chat-climate-game/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\n\n\n\nconst App = () => {\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState([\n    {\n      message: \"Hello, I am ChatGPT! Please ask me anything.\",\n      sender: \"ChatGPT\",\n      direction: \"ingoing\",\n    },\n  ]);\n\n  //Added the API constants\n  const [userId, setUserId] = useState('');\n  const [message, setMessage] = useState('');\n  const [response, setResponse] = useState('');\n\n\n  const handleSend = async (message) => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\",\n    }\n\n    // new array of messages\n    const newMessages = [...messages, newMessage]; // all the old messages, + the new messages \n\n    //update our messages state\n    setMessages(newMessages);\n\n    //set a typing indicator (chatgpt is typing...)\n    setTyping(true);\n    //process message to chatGPT (send it over and see reponse)\n\n    await processMessageToChatGPT(newMessages);\n\n  }\n\n  async function processMessageToChatGPT(chatMessages) {\n    //chatMessages { sender: \"user\" or \"ChatGPT\", message: \"The message content here\"}\n    //apiMessages {role: \"user\" or \"assistant\", content: \"The message content here\"}\n\n    let apiMessages = chatMessages.map((messageObject) => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\"\n      } else {\n        role = \"user\"\n      }\n      return { role: role, content: messageObject.message }\n    });\n\n    //role: \"user\" -> a message from the user, \"assistant -> a response from chatGPT\"\n    // \"system\" -> generally one initial message defining HOW we want chatgpt to talk\n\n    const systemMessage = {\n      role: \"system\",\n      content: \"Explain all concepts like I am a narrator for a digital game.\"\n    }\n\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [\n        systemMessage,\n        ...apiMessages // [message1, message2, message3]\n      ]\n    }\n\n    const apiKey = \"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\";\n\n\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then((data) => {\n      return data.json();\n    }).then((data) => {\n      console.log(data.choices[0].message.content);\n      setMessages(\n        [...chatMessages, {\n          message: data.choices[0].message.content,\n          sender: \"ChatGPT\"\n        }]\n      );\n      setTyping(false);\n    })\n  }\n\n\n\n  return (\n    <div>\n\n      <div style={{ position: \"relative\", height: \"600px\", width: \"500px\" }}>\n\n        <MainContainer>\n          <ChatContainer>\n            <MessageList typingIndicator={typing ? <TypingIndicator content=\"ChatGPT is typing\" /> : null}>\n              {messages.map((message, i) => {\n                return <Message key={i} model={message} />\n              })}\n            </MessageList>\n            <MessageInput placeholder='Type message here' onSend={handleSend} />\n          </ChatContainer>\n        </MainContainer>\n\n      </div>\n\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,2DAA2D;AAClE,SAASC,aAAa,EAAEC,aAAa,EAAEC,WAAW,EAAEC,OAAO,EAAEC,YAAY,EAAEC,eAAe,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIjI,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,CACvC;IACEe,OAAO,EAAE,8CAA8C;IACvDC,MAAM,EAAE,SAAS;IACjBC,SAAS,EAAE;EACb,CAAC,CACF,CAAC;;EAEF;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACe,OAAO,EAAEK,UAAU,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACqB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAG5C,MAAMuB,UAAU,GAAG,MAAOR,OAAO,IAAK;IACpC,MAAMS,UAAU,GAAG;MACjBT,OAAO,EAAEA,OAAO;MAChBC,MAAM,EAAE,MAAM;MACdC,SAAS,EAAE;IACb,CAAC;;IAED;IACA,MAAMQ,WAAW,GAAG,CAAC,GAAGZ,QAAQ,EAAEW,UAAU,CAAC,CAAC,CAAC;;IAE/C;IACAV,WAAW,CAACW,WAAW,CAAC;;IAExB;IACAb,SAAS,CAAC,IAAI,CAAC;IACf;;IAEA,MAAMc,uBAAuB,CAACD,WAAW,CAAC;EAE5C,CAAC;EAED,eAAeC,uBAAuBA,CAACC,YAAY,EAAE;IACnD;IACA;;IAEA,IAAIC,WAAW,GAAGD,YAAY,CAACE,GAAG,CAAEC,aAAa,IAAK;MACpD,IAAIC,IAAI,GAAG,EAAE;MACb,IAAID,aAAa,CAACd,MAAM,KAAK,SAAS,EAAE;QACtCe,IAAI,GAAG,WAAW;MACpB,CAAC,MAAM;QACLA,IAAI,GAAG,MAAM;MACf;MACA,OAAO;QAAEA,IAAI,EAAEA,IAAI;QAAEC,OAAO,EAAEF,aAAa,CAACf;MAAQ,CAAC;IACvD,CAAC,CAAC;;IAEF;IACA;;IAEA,MAAMkB,aAAa,GAAG;MACpBF,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAE;IACX,CAAC;IAED,MAAME,cAAc,GAAG;MACrB,OAAO,EAAE,eAAe;MACxB,UAAU,EAAE,CACVD,aAAa,EACb,GAAGL,WAAW,CAAC;MAAA;IAEnB,CAAC;;IAED,MAAMO,MAAM,GAAG,qDAAqD;IAGpE,MAAMC,KAAK,CAAC,4CAA4C,EAAE;MACxDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,eAAe,EAAG,UAASH,MAAO,EAAC;QACnC,cAAc,EAAE;MAClB,CAAC;MACDI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,cAAc;IACrC,CAAC,CAAC,CAACQ,IAAI,CAAEC,IAAI,IAAK;MAChB,OAAOA,IAAI,CAACC,IAAI,EAAE;IACpB,CAAC,CAAC,CAACF,IAAI,CAAEC,IAAI,IAAK;MAChBE,OAAO,CAACC,GAAG,CAACH,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,CAAChC,OAAO,CAACiB,OAAO,CAAC;MAC5ClB,WAAW,CACT,CAAC,GAAGa,YAAY,EAAE;QAChBZ,OAAO,EAAE4B,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,CAAChC,OAAO,CAACiB,OAAO;QACxChB,MAAM,EAAE;MACV,CAAC,CAAC,CACH;MACDJ,SAAS,CAAC,KAAK,CAAC;IAClB,CAAC,CAAC;EACJ;EAIA,oBACEJ,OAAA;IAAAwC,QAAA,eAEExC,OAAA;MAAKyC,KAAK,EAAE;QAAEC,QAAQ,EAAE,UAAU;QAAEC,MAAM,EAAE,OAAO;QAAEC,KAAK,EAAE;MAAQ,CAAE;MAAAJ,QAAA,eAEpExC,OAAA,CAACP,aAAa;QAAA+C,QAAA,eACZxC,OAAA,CAACN,aAAa;UAAA8C,QAAA,gBACZxC,OAAA,CAACL,WAAW;YAACkD,eAAe,EAAE1C,MAAM,gBAAGH,OAAA,CAACF,eAAe;cAAC0B,OAAO,EAAC;YAAmB;cAAAsB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,QAAG,GAAG,IAAK;YAAAT,QAAA,EAC3FnC,QAAQ,CAACgB,GAAG,CAAC,CAACd,OAAO,EAAE2C,CAAC,KAAK;cAC5B,oBAAOlD,OAAA,CAACJ,OAAO;gBAASuD,KAAK,EAAE5C;cAAQ,GAAlB2C,CAAC;gBAAAJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,QAAoB;YAC5C,CAAC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QACU,eACdjD,OAAA,CAACH,YAAY;YAACuD,WAAW,EAAC,mBAAmB;YAACC,MAAM,EAAEtC;UAAW;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAG;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MACtD;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAEZ;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEF;AAEV,CAAC;AAAC/C,EAAA,CAjHID,GAAG;AAAAqD,EAAA,GAAHrD,GAAG;AAmHT,eAAeA,GAAG;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}